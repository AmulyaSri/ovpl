def construct_repo_name(lab_id, lab_src_url):
    logger.debug("lab_src_url: %s" % lab_src_url)
    repo = lab_src_url.split('/')[-1]
    repo_name = lab_id + (repo[:-4] if repo[-4:] == ".git" else repo)
    logger.debug("repo_name: %s" % repo_name)
    return repo_name

def repo_exists(repo_name):
    return os.path.isdir(GIT_CLONE_LOC+repo_name)

def clone_repo(repo_name):
    clone_cmd = "git clone %s %s%s" % (lab_src_url, GIT_CLONE_LOC,repo_name)
    logger.debug(clone_cmd)
    try:
        subprocess.check_call(clone_cmd, shell=True)
    except Exception, e:
        logger.error("git clone failed for repo %s: %s" % (repo_name, str(e)))
        raise e

def pull_repo(repo_name):
    pull_cmd = "git --git-dir=%s/.git pull" % (GIT_CLONE_LOC + repo_name)
    logger.debug(pull_cmd)
    try:
        subprocess.check_call(pull_cmd, shell=True)
    except Exception, e:
        logger.error("git pull failed for repo %s: %s" % (repo_name, str(e)))
        raise e

def checkout_version(repo_name):
    if version:
        try:
            checkout_cmd = shlex.split("git --git-dir=%s checkout %s" \
                            % ((GIT_CLONE_LOC + repo_name), version))
            logger.debug(checkout_cmd)
            subprocess.check_call(checkout_cmd, shell=True)
        except Exception, e:
            logger.error("git checkout failed for repo %s tag %s: %s" \
                            % (repo_name, version, str(e)))
            raise e

def get_lab_spec(repo_name):
    repo_path = GIT_CLONE_LOC + repo_name + LAB_SPEC_LOC
    if not os.path.exists(repo_path):
        logger.error("Lab spec file not found")
        raise LabSpecInvalid("Lab spec file not found")
    try:
        return json.loads(open(repo_path).read())
    except Exception, e:
        logger.error("Lab spec JSON invalid: " + str(e))
        raise LabSpecInvalid("Lab spec JSON invalid: " + str(e))
