#+title: AWSAdapter for ADS
#+PROPERTY: session *scratch*
#+PROPERTY: results output
#+PROPERTY: exports code
#+SETUPFILE: org-templates/level-0.org
#+OPTIONS: ^:nil

* Introduction
An adapter is an ADS component, which is responsible for creating and
managing VMs on a particular platform.

The =AWSAdapter= is an adapter for the AWS platform.

In the following document, the words *instance* and *VM* have been used
interchangeably.

* Requirements
  1. =AWSAdapter= will create a VM on AWS based on the specification
     given in the lab spec for a particular lab.

  2. =AWSAdapter= will copy the =VMManager= component to the newly
     created VM and start the =VMManager= service.

  3. Pre-requisites for the =AWSAdapter=:
     + The =AdapterServer= which communicates with this adapter is running on
       AWS.
     + The =AdapterServer= is configured to use the =AWSAdapter=.
     + Appropriate parameters for the adapter are configured in the
       =aws_config.py= file (explained below).
     + The AWS key pair is placed in the appropriate location, which is same
       as what is configured in the =aws_config.py= file.

* Design
** Interfaces
In the current design of ADS, a fixed set of interfaces to an adapter
is already defined. An adapter is required to implement these
interfaces. This enables other components/services of ADS to
communicate with the adapter. The interfaces implemented by the
AWSAdapter are listed below:

1. *create_vm* (self, lab_spec, dry_run=False)

     Creates a new VM.

     *Parameters*:
                 + lab_spec - Lists the lab and VM related reqirements.
                 + dry_run(bool) - Set to True if the operation should not actually run.

     *Returns*: Instance id of the newly created Amazon VM.

2. *start_vm* (self, vm_id, dry_run=False)

     Starts the VM identified by =vm_id=.

     *Parameters*:
                 + vm_id - VM/instance id of the VM to be started.
                 + dry_run(bool) - Set to True if the operation should not actually run.

     *Returns*: List of instances that got started.

3. *stop_vm* (self, vm_id, dry_run=False)

     Stops the VM identified by =vm_id=.

     *Parameters*:
                 + vm_id - VM/instance id of the VM to be started.
                 + dry_run(bool) - Set to True if the operation should not actually run.

     *Returns*: List of instances that got stopped.

4. *restart_vm* (self, vm_id, dry_run=False)

     Stops the VM identified by =vm_id= and then starts it again.

     *Parameters*:
                 + vm_id - VM/instance id of the VM to be started.
                 + dry_run(bool) - Set to True if the operation should not actually run.

     *Returns*: List of instances that got restarted.

5. *start_vm_manager* (self, vm_id )

     Starts the VM manager service inside the VM identified by =vm_id=.

     *Parameters*:
                 + vm_id - VM/instance id of the VM to be started.

     *Returns*: True if the VM Manager service has successfully started.

6. *destroy_vm* (self, vm_id, dry_run=False)

     Terminates the VM identified by =vm_id=.

     *Parameters*:
                 + vm_id - VM/instance id of the VM to be started.
                 + dry_run(bool) - Set to True if the operation should not actually run.

     *Returns*: List of instances that got terminated.

7. *is_running_vm* (self, vm_ip)

     Checks if the VM is up and port 22 is reachable. It assumes that
     VM is running the SSH service.

     *Parameters*:
                 + vm_ip - The ip address of VM.

     *Returns*: True if the VM is up, else False.

** Configuration Parameters
Following are the parameters which are needed to be configured in this
adapter, for the adapter to be able to communicate with AWS APIs.

1. *region*: The data centre region in which an AWS connection is to
   be made to create instances/VMs. Each region is a separate
   geographic area. More information about AWS regions [[http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html][here]].

2. *credentials*: Credentials are used to authenticate the API to
   AWS. The REST API uses *access keys* as the credentials. The access
   key has two parts:

   + *Access Key ID* - It identifies the party responsible for service
     requests. It is included in each request, so it's not a secret.

   + *Secret Access Key* - Each Access Key ID has a Secret Access Key
     associated with it. This key is just a long string of characters
     (and not a file) that is used to calculate the digital signature
     included in the request. More information [[http://docs.aws.amazon.com/general/latest/gr/aws-security-credentials.html][here]].

   Both region and credentials are required whenever a new connection
   is established. Within this connection, a number of VMs could be
   created.

3. *subnet_id*: The id of the subnet to be associated with an instance
   or VM. This is used while creating an instance or VMs. More
   information [[http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Subnets.html][here]].

4. *security_group_ids*: A list of ids of the security groups to be
   associated with an instance or VM. This is used while creating an
   instance or VMs. More information about security groups [[http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_SecurityGroups.html][here]].

5. *key_name*: The name of the key pair with which to launch
   instances. More information [[http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html][here]].

These parameters come from a configuration file which is not checked
in to the repository. Instead, a sample configuration file is checked
in. A deployer is responsible for modifying this file and filling the
appropriate values.

*** Sequence Diagram of AWSAdapter
[[./Sequence diagram of AWSAdapter.png]]

Following is the sequence of events that occur when a lab is deployed
on AWS using AWSAdapter:

1. VM Pool Manager sends an HTTP Request to Adapter Server indicating
   that a VM needs to be created. It also passes the lab spec that
   includes VM requirements.

2. On receiving this request, the Adapter Server calls the create_vm()
   function of AWSAdapter and hands over the lab spec to it.

3. Based on lab spec(as mentioned in strategic decisions), the
   AWSAdapter selects an AMI and instance type for the VM.

4. It creates a VM on AWS Cluster.

5. The VM/instance id of the newly created VM is returned to the
   Adapter Server.

6. The Adapter Server now calls the init_vm() function of AWSAdapter.

7. This initializes the newly created VM on AWS Cluster by copying
   relevant ADS component (VM Manager) and lab sources, and starting
   the VM Manager.

8. Once this service has started, the AWSAdapter sends back a tuple to
   the Adapter Server consisting of a boolean value(that indicates
   success/failure), instance/VM id of the VM on AWS Cluster, ip
   address of the VM, and port on which the VM Manager service is
   running.

9. The latter three are forwarded by Adapter Server as HTTP response
   to the VM Pool Manager.
<<<<<<< HEAD
 
** Other design and strategic decisions:
*** What AMIs to support and how to select them based on the lab spec input?
    
*** What instance types to support and how to select it based on the lab spec input?
   

* Implementation
* Testing
** Objective
What are we trying to test exactly? What type of testing?
+ To validate the creation of a VM on AWS platform.
+ To ensure that all the ADS services are running on this VM.
+ To validate that a lab is successfully deployed on this VM.

We are testing at the application level, that is verifying that the
entire application functions together according to the requirements.

** Assumptions
+ The test cases are written and tested for AWSAdapter.
+ Access is permissible only from IIIT (vlead).
+ Only the Ubuntu 12.04 AMI mentioned in the sample config works as of
  now.
+ The username (of the provisioned VM) is *ubuntu* - do we need to
  give this???

** Testing Environment

1. A VM is provisioned on AWS, such that it is able to access the
   internet.
2. The *state* of this instance/VM is *running*.
3. In this VM, =ADS= repository is cloned.
4. The =sample_aws_config.py= file present in =ovpl/src/adapters= is
   changed to use appropriate subnet, security group and key name.


** Test Cases
*** Case 01: Creation of a Virtual Machine on AWS platform.
The objective of this test case is to test the creation of a virtual
machine on AWS. =create_vm()= in *AWSAdapter* is responsible in ADS
for creation of virtual machine. A VM will be created in this test
scenario and the creation is tested by pinging vm-id on successful
creation.

*** Case 02: Copying VMManager files to VM (or Checking if VMManager service is running successfully)?
The objective of this test case is to test whether the VMManager files
are copied to the VM. These VMManager files are essential to build and
deploy a lab in VM. In this scenario, , copy VMManager files, test for
the copy. ????


** How to Test?(and show using tables with results?)
Assuming that the testing environment is all set up, we can perform
the following steps to run the test cases:

1. ssh to the ssh-tunnel with your ldap account
#+BEGIN_SRC
ssh <username>@ssh-tunnel.vlabs.ac.in
#+END_SRC

2. The Amazon private key should be present in the home directory.

3. ssh into the already provisioned VM, using Amazon private key,
   username and public IP of the VM.
   #+BEGIN_SRC    
   ssh -i <Amazon private key> <username>@<public-IP>
   #+END_SRC

4. What about the credentials checked in =ovpl/src/adapters= of
   provisioned VM(ADS on AWS)?
=======

** TODO Strategic decisions:
*** What OS/AMIs to support?
*** How to select an AMI based on the lab spec input?
*** What machine configuration/instance types to support?
*** How to select an instance type based on the lab spec input?

** TODO Other related documentation
*** How to create an AMI for lab deployment?

* Implementation

* Test Cases

>>>>>>> 9b0f4475746d9ef3bd35efe2184f34380ac48fea
