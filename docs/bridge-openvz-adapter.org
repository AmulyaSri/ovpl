#+Title: Bridge OpenVZ Adapter
#+Author: vlead
#+Date: 15 April 2015

* Introduction
An adapter is an ADS component, which is responsible for creating and
managing VMs on a particular platform. This document presents the
requirements, design and implementation of the *bridge-openvz-adapter*
(BOA). BOA adapter is designed for centos platform.

* Assumptions
Following are the pre-requisites for understanding the *BOA*:
    + Understanding the bridge-network is essential to understand the
      working of the adapter. A detailed documentation on setting
      up a bridged network can be found [[./bridge-setup.org][here]]
    + The provisioning of ADS server has to meet the requirements of a
      bridged network. These requirements and provisioning are defined
      [[./ads-provisioning.org][here]].
Following infrastructure has to be made available to run the *BOA*:    
    + The brdige network is setup and running
    + One of the component in the network is the ADS server
    + ADS server is provisioned, up and running
    + The git is updated with newer version on the ADS server
    + *BOA* source code is cloned on the ADS server

* Requirement
Following are the requirements of the BOA adapter:
    + BOA will create a ubuntu container using OpenVZ as a
      hypervisor based on the specification given in the lab spec of a
      particular lab.
    + BOA will copy the ADS and lab source code to the newly created
      container and start the VMManager service.
    + BOA will copy the bridge network interface settings to the newly
      created container from the ADS server

* Design
** Sequence Diagram
The design of the adapter is presented in the sequence diagram:

[[./BOA-sequence-diagram.png]]

Note: The sequence diagram is generated using a online tool at [[https://www.websequencediagrams.com/][Web
Sequence Diagrams]] and following is the source code for diagram
generation:
#+begin_src example
title Centos BrdigeOpenVZAdapter(BOA) Design

VM Pool Manager->+Adapter Server: HTTP Request with lab spec
Adapter Server-> +BOA: create vm using lab spec

BOA->Bridge Network: create vm
BOA->Bridge Network: copy network settings

BOA-> -Adapter Server: returns vm id
Adapter Server->+BOA: initialize vm

BOA->Bridge Network: copy VMManager
BOA->Bridge Network : copy lab sources
BOA->-Adapter Server: return vm details

Adapter Server-> -VM Pool Manager: return vm details
#+end_src

** Interfaces
In the current design of ADS, a fixed set of interfaces to an adapter
is already defined. An adapter is required to implement these
interfaces. This enables other components/services of ADS to
communicate with the adapter. The interfaces implemented by the
OpenVZAdapter are listed below:

1. *create_vm* (self, lab_spec, vm_id="")   
   Creates a new VM.
   *Parameters*: 
       + lab_spec - Lists the lab and VM related reqirements
       + vm_id - If no vm_id is specified, it is computed using the
         last two segments of an available IP address
   *Returns*: VM id of the newly created VM

2. *start_vm* (self, vm_id)
   Starts the VM identified by =vm_id=.
   *Parameters*:
       + vm_id - vm_id of the VM to be started
   *Returns*: List of VMs that got started

3. *stop_vm* (self, vm_id)
   Stops the VM identified by =vm_id=.
   *Parameters*:
       + vm_id - VM id of the VM to be stopped
   *Returns*: List of VMs that got stopped

5. *start_vm_manager* (self, vm_id)
   Starts the VM manager service inside the VM identified by =vm_id=
   *Parameters*:
       + vm_id - VM id of the VM to be started
   *Returns*: True if the VM Manager service has successfully started

6. *prepare_vm_for_bridged_network* (self, vm_id)
   Prepares the vm with settings for the bridged network.
   *Parameters*:
       + vm_id: VM id of the VM to be set with network settings
   *Returns*: True if the settings is successfully applied

** Configuration
1) Bridged network do not need proxies to be set. In the files
   ovpl/config/config.json and ovpl/src/VMManager/config.json proxies
   have to remain unset. Example:
#+BEGIN_EXAMPLE
"ENVIRONMENT": { "HTTP_PROXY":"", "HTTPS_PROXY":"" },
#+END_EXAMPLE

2) In order to save the logs in the ADS machine, the *config.json*
   file in */ovpl/config* needs to be updated with ADS server IP for
   the variable *SERVER_IP* under *LOGGING CONGIGURATION*.

3) Following changes have to be made in *settings.py* file present in
   *ovpl/src/adapters* directory:
      + Set the *BASE_IP_ADDRESS* variable with ip address of the base
        machine where the ADS server is deployed
      + Set the vm server id for the variable *ADS_SERVER_VM_ID*
      + Set the *SUBNET_BRIDGE* variable with the name of the subnet
        bridge of the network
      + In the function *get_subnet()* provide the *SUBNET* range for
        the network

* Implementation 
The source code of the implementation of the adapter is located at the
following Github URL:
[[https://github.com/vlead/ovpl/tree/bridge-openvz-adapter][bridge-openvz-adapter]]
* Testing
** Objective
+ To validate the creation of a container on CentOS platform which has
  a openvz as hypervisor.
+ To ensure that the newly created container is connected to bridged network.
+ To ensure that the ADS and Lab source are copied into container.
+ To ensure that the VMManager service is running on this container.

This is achieved through unit testing.

** Testing Environment
Following are the pre-requisites for the test environment:
1. A container is provisioned on base1-cluster with internet acces.
2. The *state* of this container is *running*
3. =ADS= is configured and running in the provisioned container.
4. The test cases are written and tested for BridgeVZAdapter.

** Test Cases
*** Case 01: Creation of a container on base1-cluster platform.
The objective of this test case is to test the creation of a container
on base1-cluster. =vm_create()= in *BridgeVZAdapter* is responsible in
ADS for creation of virtual machine. A container will be created in
this test scenario and the creation is tested by pinging vm-id on
successful creation.

*** Case 02: Setting up the container to connect to the bridged-network.
The objective of this test case is to test the whether newly created
container is connected to the bridged-network or not. =vm_set()= in
*BridgeVZAdapter* is responsible in ADS for setup container. A
container will be set in this test scenario and tested by pinging
container-ip on successful setup.

*** Case 03: Copying ADS and Lab source code to newly created container.
The objective of this test case is to test the whether ADS and Labs
source code is copied into the newly created container. =copy_files()=
in *BridgeVZAdapter* is responsible in ADS for copying these files. In
this test scenario look for =ovpl= and =labs= folders in newly created
container at =/root/=.

*** Case 04: Checking if VMManager service is running successfully
The objective of this is to test whether the VMManager service is
running successfully on the newly created container on base1-cluster. =init_vm()= in *BridgeVZAdapter* is responsible in ADS for intializing service.

*** Implementation of test cases
The implementation code for all above test case scenarios can be found [[https://github.com/vlead/ovpl/blob/bridge-openvz-adapter/tests/test_bridge_openvz_adapter.py][here]]
